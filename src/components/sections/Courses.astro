---
import { z } from 'astro:content';

import { multiLingualSchema } from '@utils/zod.ts';
import { getLocaleData, getLocaleFromURL } from '@utils/locale.ts';

import data from '@content/courses.json';

const locale = getLocaleFromURL(Astro.url);

const contentSchema = multiLingualSchema(
  z.object({
    title: z.string(),
    days: z.array(
      z.object({
        name: z.string(),
        lessons: z.array(
          z.object({
            time: z.string(),
            level: z.string(),
            ceflevel: z.string(),
          }),
        ),
      }),
    ),
    levelsTitle: z.string(),
    levelsDescription: z.string(),
    levels: z.array(
      z.object({
        name: z.string(),
        description: z.string(),
        subLevels: z.array(
          z.object({
            name: z.string(),
            description: z.string(),
          }),
        ),
      }),
    ),
  }),
);

const parsedData = contentSchema.parse(data);

const content = getLocaleData(locale, parsedData);

const colors = [
  { border: 'border-blue-500', bg: 'bg-blue-50' },
  { border: 'border-green-500', bg: 'bg-green-50' },
  { border: 'border-purple-500', bg: 'bg-purple-50' },
];

const getLevelColor = (ceflevel: string) => {
  if (ceflevel.startsWith('A')) return colors[0];
  if (ceflevel.startsWith('B')) return colors[1];
  if (ceflevel.startsWith('C')) return colors[2];
  return colors[0];
};

const getLevelId = (ceflevel: string) => {
  if (ceflevel.startsWith('A')) return 'level-0';
  if (ceflevel.startsWith('B')) return 'level-1';
  if (ceflevel.startsWith('C')) return 'level-2';
  return 'level-0';
};
---

<div id="courses" class="mt-4 flex w-full flex-col">
  <h1>{content.title}</h1>
  {
    content.days.map((day) => (
      <table class="w-full max-w-3xl divide-y-2 divide-gray-200">
        <thead>
          <tr class="text-left *:text-gray-900 *:first:font-medium">
            <th class="w-1/4 px-3 py-2 whitespace-nowrap">{day.name}</th>
            <th />
            <th class="px-3 py-2 text-left whitespace-nowrap">CEF Level</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          {day.lessons.map((lesson) => (
            <tr class="*:font-medium *:text-gray-900">
              <td class="w-1/8 px-3 py-2 whitespace-nowrap">{lesson.time}</td>
              <td class="px-3 py-2 whitespace-nowrap">{lesson.level}</td>
              <td
                class={`w-1/8 px-3 py-2 whitespace-nowrap ${getLevelColor(lesson.ceflevel).bg}`}
              >
                <a
                  href={`#${getLevelId(lesson.ceflevel)}`}
                  class="underline hover:text-blue-700"
                >
                  {lesson.ceflevel}
                </a>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    ))
  }

  <details
    id="levels-details"
    class="group mt-6 [&_summary::-webkit-details-marker]:hidden"
  >
    <summary
      class="flex cursor-pointer items-center justify-between gap-4 bg-gray-50 p-6"
    >
      <div>
        <h2 class="mb-2 text-2xl font-bold text-gray-900">
          {content.levelsTitle}
        </h2>
        <p class="text-gray-600">{content.levelsDescription}</p>
      </div>
      <svg
        class="size-6 shrink-0 text-gray-500 transition-transform duration-300 group-open:-rotate-180"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 9l-7 7-7-7"></path>
      </svg>
    </summary>

    <div class="space-y-6 bg-gray-50 p-6">
      {
        content.levels.map((level, index) => {
          const color = colors[index] || colors[0];

          return (
            <div
              id={`level-${index}`}
              class={`border-l-4 bg-white p-5 shadow-sm ${color.border}`}
            >
              <h3 class="mb-2 text-xl font-bold text-gray-900">{level.name}</h3>
              <p class="mb-4 text-gray-700">{level.description}</p>

              {level.subLevels && level.subLevels.length > 0 && (
                <div class="ml-4 space-y-3">
                  {level.subLevels.map((subLevel) => (
                    <div class={`${color.bg} p-4`}>
                      <h4 class="mb-1 font-semibold text-gray-900">
                        {subLevel.name}
                      </h4>
                      <p class="text-sm text-gray-700">
                        {subLevel.description}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          );
        })
      }
    </div>
  </details>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const levelLinks = document.querySelectorAll('a[href^="#level-"]');
    const details = document.getElementById(
      'levels-details',
    ) as HTMLDetailsElement;

    levelLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        if (details && !details.open) {
          details.open = true;
        }
      });
    });
  });
</script>
