---
import { z } from 'astro:content';

import { multiLingualSchema } from '@utils/zod.ts';
import { getLocaleData, getLocaleFromURL } from '@utils/locale.ts';

import data from '@content/courses.json';

const locale = getLocaleFromURL(Astro.url);

const contentSchema = multiLingualSchema(
  z.object({
    title: z.string(),
    days: z.array(
      z.object({
        name: z.string(),
        lessons: z.array(
          z.object({
            time: z.string(),
            level: z.string(),
            ceflevel: z.string(),
          }),
        ),
      }),
    ),
    levelsTitle: z.string(),
    levelsDescription: z.string(),
    levels: z.array(
      z.object({
        name: z.string(),
        description: z.string(),
        subLevels: z.array(
          z.object({
            name: z.string(),
            description: z.string(),
          }),
        ),
      }),
    ),
  }),
);

const parsedData = contentSchema.parse(data);

const content = getLocaleData(locale, parsedData);
---

<div id="courses" class="mt-4 flex w-full flex-col">
  <h1>{content.title}</h1>
  {
    content.days.map((day) => (
      <table class="w-full max-w-3xl divide-y-2 divide-gray-200">
        <thead>
          <tr class="text-left *:text-gray-900 *:first:font-medium">
            <th class="w-1/4 px-3 py-2 whitespace-nowrap">{day.name}</th>
            <th />
            <th class="px-3 py-2 text-left whitespace-nowrap">CEF Level</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          {day.lessons.map((lesson) => (
            <tr class="*:font-medium *:text-gray-900">
              <td class="w-1/8 px-3 py-2 whitespace-nowrap">{lesson.time}</td>
              <td class="px-3 py-2 whitespace-nowrap">{lesson.level}</td>
              <td class="w-1/8 px-3 py-2 whitespace-nowrap">
                {lesson.ceflevel}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    ))
  }

  <details class="group [&_summary::-webkit-details-marker]:hidden">
    <summary
      class="flex items-center justify-between gap-1.5 rounded-md border border-gray-100 bg-gray-50 p-4 text-gray-900"
    >
      <div>
        <h2 class="mt-4">{content.levelsTitle}</h2>
        <p class="mb-2">{content.levelsDescription}</p>
      </div>

      <svg
        class="size-5 shrink-0 transition-transform duration-300 group-open:-rotate-180"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 9l-7 7-7-7"></path>
      </svg>
    </summary>

    {
      content.levels.map((level) => (
        <div class="mb-4">
          <h3 class="text-lg font-semibold">{level.name}</h3>
          <p>{level.description}</p>
          {level.subLevels.map((subLevel) => (
            <div class="ml-4">
              <h4 class="text-md font-medium">{subLevel.name}</h4>
              <p>{subLevel.description}</p>
            </div>
          ))}
        </div>
      ))
    }
  </details>
</div>
